{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "OCIS Application Stack - Contains 1 x Web/App server, 1 x Reporting Server, and a RDS database.",

  "Parameters": {
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "The VPC Id of an existing Virtual Private Cloud."
    },

    "PrivSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "The string of the Private SubnetId in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "Subnet Id"
    },

    "PrivSubnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of Private SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },

    "DBAllocatedStorage": {
      "Default": "500",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 5 and 1024Gb."
    },

    "DBInstanceClass": {
      "Description": "The database instance type",
      "Type": "String",
      "Default": "db.m4.large",
      "ConstraintDescription": "must select a valid database instance type."
    },

    "MultiAZDatabase": {
      "Default": "true",
      "Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues": [ "true", "false" ],
      "ConstraintDescription": "must be either true or false."
    },

    "AppWebInstanceProfile": {
      "Description": "WebServer EC2 IAM instance profile (with read permission to AWS Secrets Manager)",
      "Type": "String",
      "Default": "customer_origin_secrets_manager_instance_profile",
      "AllowedPattern": "^[a-zA-Z0-9-_]*$",
      "ConstraintDescription": "Must be a valid pre-existing EC2 IAM role aka instance profile."
    },

    "AppWebInstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t3.xlarge",
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "ReportingInstanceProfile": {
      "Description": "Reporting Server EC2 IAM instance profile (with read permission to AWS Secrets Manager)",
      "Type": "String",
      "Default": "customer_origin_secrets_manager_instance_profile",
      "AllowedPattern": "^[a-zA-Z0-9-_]*$",
      "ConstraintDescription": "Must be a valid pre-existing EC2 IAM role aka instance profile."
    },

    "ReportingInstanceType": {
      "Description": "Reporting Server EC2 instance type",
      "Type": "String",
      "Default": "t3.xlarge",
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },

    "ImageId": {
      "Description": "Image ID that will be used for the servers",
      "Type": "String",
      "Default": "ami-00f409158af899a3e",
      "ConstraintDescription": "Must be a valid Origin AMI."
    }

  },

  "Resources": {

    "AppWebEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "BlockDeviceMappings": [
           {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "VolumeSize": "100"
              }
           },
                      {
              "DeviceName": "xvdf",
              "Ebs": {
                "VolumeSize": "50"
              }
           },
                      {
              "DeviceName": "xvdg",
              "Ebs": {
                "VolumeSize": "50"
              }
           }
        ],
        "ImageId": { "Ref": "ImageId" },
        "IamInstanceProfile": { "Ref": "AppWebInstanceProfile" },
        "InstanceType": { "Ref": "AppWebInstanceType" },
        "SecurityGroupIds" : [ { "Ref": "EC2ServersSecurityGroup" } ],
        "SubnetId": { "Ref": "PrivSubnet" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "App/Web Server"
          },
          {
            "Key": "Type",
            "Value": "Pet"
          }
        ]        
      }
    },

    "AppWebEC2InstanceRecoveryTestAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2" ,
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "AppWebEC2Instance"}}]
      }
    },    
    
    "ReportingEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "BlockDeviceMappings": [
           {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "VolumeSize": "100"
              }
           },
                      {
              "DeviceName": "xvdf",
              "Ebs": {
                "VolumeSize": "150"
              }
           },
                      {
              "DeviceName": "xvdg",
              "Ebs": {
                "VolumeSize": "50"
              }
           }
        ],
        "ImageId": { "Ref": "ImageId" },
        "IamInstanceProfile": { "Ref": "ReportingInstanceProfile" },
        "InstanceType": { "Ref": "ReportingInstanceType" },
        "SecurityGroupIds" : [ { "Ref": "EC2ServersSecurityGroup" } ],
        "SubnetId": { "Ref": "PrivSubnet" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Reporting Server"
          },
          {
            "Key": "Type",
            "Value": "Pet"
          }
        ]
      }
    },

    "ReportingEC2InstanceRecoveryTestAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2" ,
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "ReportingEC2Instance"}}]
      }
    },    

    "EC2ServersSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via port 80",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp" : "10.0.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp" : "10.0.0.0/16"
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      }
    },
    
    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "1521",
            "ToPort": "1521",
            "SourceSecurityGroupId": { "Ref": "EC2ServersSecurityGroup" }
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      }
    },

    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Private subnet group",
        "SubnetIds": { "Ref": "PrivSubnets" }
      }
    },

    "OracleDB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine": "oracle-se2",
        "EngineVersion": "12.2.0.1.ru-2019-01.rur-2019-01.r1",
        "LicenseModel": "bring-your-own-license",
        "MasterUsername": "{{resolve:secretsmanager:ams-shared/stage-otdb-new:SecretString:Username}}",
        "MasterUserPassword": "{{resolve:secretsmanager:ams-shared/stage-otdb-new:SecretString:Password}}",
        "MultiAZ": { "Ref": "MultiAZDatabase" },
        "DBInstanceClass": { "Ref": "DBInstanceClass" },
        "AllocatedStorage": { "Ref": "DBAllocatedStorage" },
        "DBSubnetGroupName": { "Ref": "DBSubnetGroup" },
        "VPCSecurityGroups": [ { "Fn::GetAtt": [ "DBSecurityGroup", "GroupId" ] } ]
      }
    }
  },


  "Outputs": {

    "AppWebEC2InstancePrivateIP": {
      "Description": "Private IP address of the new newly created instance.",
      "Value": { "Fn::GetAtt": [ "AppWebEC2Instance", "PrivateDnsName" ] }
    },

    "ReportingEC2InstancePrivateIP": {
      "Description": "Private IP address of the new newly created instance.",
      "Value": { "Fn::GetAtt": [ "ReportingEC2Instance", "PrivateDnsName" ] }
    },

    "RDSEndpoint": {
      "Description": "Private IP address of the new newly created instance.",
      "Value": { "Fn::GetAtt": [ "OracleDB", "Endpoint.Address" ] }
    }

  }
  
}
