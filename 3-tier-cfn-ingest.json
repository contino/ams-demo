{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation Sample Template LAMP_Multi_AZ: Create a highly available, scalable LAMP stack with an Amazon RDS database instance for the backend data store. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy the Apache web server and PHP at instance launch time. **WARNING** This template creates one or more Amazon EC2 instances, an Application Load Balancer and an Amazon RDS DB instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters": {
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
    },

    "PubSubnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of Public SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },

    "PrivSubnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of Private SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },

    "DBName": {
      "Default": "myDatabase",
      "Description": "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },

    "DBAllocatedStorage": {
      "Default": "5",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 5 and 1024Gb."
    },

    "DBInstanceClass": {
      "Description": "The database instance type",
      "Type": "String",
      "Default": "db.t2.small",
      "AllowedValues": [ "db.t2.small", "db.t2.medium" ],
      "ConstraintDescription": "must select a valid database instance type."
    },

    "MultiAZDatabase": {
      "Default": "true",
      "Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues": [ "true", "false" ],
      "ConstraintDescription": "must be either true or false."
    },

    "WebServerCapacity": {
      "Default": "2",
      "Description": "The initial number of WebServer instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription": "must be between 1 and 5 EC2 instances."
    },

    "IAMEC2InstanceProfile": {
      "Description": "WebServer EC2 IAM instance profile (with read permission to AWS Secrets Manager)",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "^[a-zA-Z0-9-_]*$",
      "ConstraintDescription": "Must be a valid pre-existing EC2 IAM role aka instance profile."
    },

    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [ "t2.small", "t2.medium" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }

  },

  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.small": { "Arch": "HVM64" },
      "t2.medium": { "Arch": "HVM64" }
    },

    "AWSRegionArch2AMI": {
      "ap-southeast-2": {
        "HVM64": "ami-0e8aaebe46241e626",
        "HVMG2": "ami-0a9ce9fecc3d1daf8"
      },
      "ap-southeast-1": {
        "HVM64": "ami-0912f71e06545ad88",
        "HVMG2": "ami-097b15e89dbdcfcf4"
      }
    }

  },

  "Resources": {

    "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http to client host",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets": { "Ref": "PubSubnets" },
        "SecurityGroups": [ { "Ref": "ALBSecurityGroup" } ]
      }
    },

    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ALBTargetGroup" }
          }
        ],
        "LoadBalancerArn": { "Ref": "ApplicationLoadBalancer" },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },

    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 300,
        "HealthCheckTimeoutSeconds": 120,
        "HealthyThresholdCount": 2,
        "Port": 80,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 2,
        "VpcId": { "Ref": "VpcId" },
        "TargetGroupAttributes": [
          {
            "Key": "stickiness.enabled",
            "Value": "true"
          },
          {
            "Key": "stickiness.type",
            "Value": "lb_cookie"
          },
          {
            "Key": "stickiness.lb_cookie.duration_seconds",
            "Value": "30"
          }
        ]
      }
    },

    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "PrivSubnets" },
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "MinSize": "1",
        "MaxSize": "2",
        "DesiredCapacity": { "Ref": "WebServerCapacity" },
        "TargetGroupARNs": [ { "Ref": "ALBTargetGroup" } ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M",
          "Count": { "Ref": "WebServerCapacity" }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment1": "Configure the bootstrap helpers to install the Apache Web Server and PHP",
        "Comment2": "The website content is downloaded from the CloudFormationPHPSample.zip file",

        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "httpd": [],
                "php": [],
                "php-mysql": [],
                "jq": []
              }
            },

            "files": {
              "/var/www/html/index.php": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "<html>\n",
                      "  <head>\n",
                      "    <title>AWS CloudFormation PHP Sample</title>\n",
                      "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                      "  </head>\n",
                      "  <body>\n",
                      "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                      "    <p/>\n",
                      "    <?php\n",
                      "      // Print out the current data and tie\n",
                      "      print \"The Current Date and Time is: <br/>\";\n",
                      "      print date(\"g:i A l, F j Y.\");\n",
                      "    ?>\n",
                      "    <p/>\n",
                      "    <?php\n",
                      "      // Setup a handle for CURL\n",
                      "      $curl_handle=curl_init();\n",
                      "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                      "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                      "      // Get the instance-id of the intance from the instance metadata\n",
                      "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                      "      $instanceid = curl_exec($curl_handle);\n",
                      "      if (empty($instanceid))\n",
                      "      {\n",
                      "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                      "      }\n",
                      "      else\n",
                      "      {\n",
                      "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                      "      }\n",
                      "      $Database   = \"",
                      { "Fn::GetAtt": [ "MySQLDatabase", "Endpoint.Address" ] },
                      "\";\n",
                      "      $myufile = fopen(\"/dbuser.txt\", \"r\") or die(\"Unable to open file\");\n",
                      "      $DBUsr = fgets($myufile);\n",
                      "      $DBUser = trim(preg_replace('/\\s+/', ' ', $DBUsr ));\n",
                      "      $mypfile = fopen(\"/dbpass.txt\", \"r\") or die(\"Unable to open file\");\n",
                      "      $DBPass = fgets($mypfile);\n",
                      "      $DBPassword = trim(preg_replace('/\\s+/', ' ', $DBPass));\n",
                      "      print \"Database = \" . $Database . \"<br />\";\n",
                      "      print \"User = \" . $DBUser . \"<br />\";\n",
                      "      print \"Pass = \" . $DBPassword . \"<br />\";\n",
                      "      fclose($mypfile);\n",
                      "      fclose($myufile);\n",
                      "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n",
                      "                      or die(\"Could not connect: \" . mysql_error());\n",
                      "      print (\"Connected to $Database successfully\");\n",
                      "      mysql_close($dbconnection);\n",
                      "    ?>\n",
                      "    <h2>PHP Information</h2>\n",
                      "    <p/>\n",
                      "    <?php\n",
                      "      phpinfo();\n",
                      "    ?>\n",
                      "  </body>\n",
                      "</html>\n"
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "apache",
                "group": "apache"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      { "Ref": "AWS::StackName" },
                      "         --resource LaunchConfig ",
                      "         --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            },

            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [ "/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf" ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            { "Ref": "AWS::Region" },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                { "Ref": "InstanceType" },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": { "Ref": "IAMEC2InstanceProfile" },
        "SecurityGroups": [ { "Ref": "WebServerSecurityGroup" } ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Install the files and packages from the metadata\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                { "Ref": "AWS::StackName" },
                "         --resource LaunchConfig ",
                "         --region ",
                { "Ref": "AWS::Region" },
                "\n",

                "# Retreive the DB credentials from AWS Secrets Manager service, for App to consume.\n",
                "aws --region ap-southeast-2 secretsmanager get-secret-value --secret-id ams-shared/stage-otdb-new | jq -r \".SecretString\" | jq -r \".Password\" > /dbpass.txt \n",
                "aws --region ap-southeast-2 secretsmanager get-secret-value --secret-id ams-shared/stage-otdb-new | jq -r \".SecretString\" | jq -r \".Username\" > /dbuser.txt \n",
                "chmod 640 /dbuser.txt /dbpass.txt \n",
                "chgrp 48 /dbuser.txt /dbpass.txt \n",

                "# Signal the status from cfn-init\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                { "Ref": "AWS::StackName" },
                "         --resource WebServerGroup ",
                "         --region ",
                { "Ref": "AWS::Region" },
                "\n"
              ]
            ]
          }
        }
      }
    },

    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via port 80 locked down to the ELB and SSH access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": { "Ref": "ALBSecurityGroup" }
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      }
    },

    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupId": { "Ref": "WebServerSecurityGroup" }
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      }
    },

    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "description",
        "SubnetIds": { "Ref": "PrivSubnets" },
        "Tags": [
          {
            "Key": "String",
            "Value": "String"
          }
        ]
      }
    },

    "MySQLDatabase": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine": "MySQL",
        "DBName": { "Ref": "DBName" },
        "MultiAZ": { "Ref": "MultiAZDatabase" },
        "MasterUsername": "{{resolve:secretsmanager:ams-shared/stage-otdb-new:SecretString:Username}}",
        "MasterUserPassword": "{{resolve:secretsmanager:ams-shared/stage-otdb-new:SecretString:Password}}",
        "DBInstanceClass": { "Ref": "DBInstanceClass" },
        "AllocatedStorage": { "Ref": "DBAllocatedStorage" },
        "DBSubnetGroupName": { "Ref": "myDBSubnetGroup" },
        "VPCSecurityGroups": [ { "Fn::GetAtt": [ "DBEC2SecurityGroup", "GroupId" ] } ]
      }
    }
  },

  "Outputs": {
    "WebsiteURL": {
      "Description": "URL for newly created LAMP stack",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            { "Fn::GetAtt": [ "ApplicationLoadBalancer", "DNSName" ] }
          ]
        ]
      }
    }
  }
}
